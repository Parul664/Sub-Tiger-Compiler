Program[
 LetExpr([
  TypeDec[  SeqTy[
   (any,(int))]],
  VarDec(buffer,NONE,
   FuncCallExpr(getchar,[])),
  FuncDecs(  fundec(readint,TF[
   any,(any)  ],
  SOME((int)),
   LetExpr([
    VarDec(i,NONE,
     IExpr(0)),
    FuncDecs(    fundec(isdigit,TF[
     s,(string)    ],
    SOME((int)),
     BinOpExpr(And,
      BinOpExpr(GreatEqualThan,
       FuncCallExpr(ord,[
        LValueExpr(
        SimpleVar(buffer))]),
       FuncCallExpr(ord,[
        SExpr("0")])),
      BinOpExpr(LessEqualThan,
       FuncCallExpr(ord,[
        LValueExpr(
        SimpleVar(buffer))]),
       FuncCallExpr(ord,[
        SExpr("9")]))))),
    FuncDecs(    fundec(skipto,TF[    ],
    NONE
     WhileExpr(
      BinOpExpr(Or,
       BinOpExpr(Equals,
        LValueExpr(
        SimpleVar(buffer)),
        SExpr(" ")),
       BinOpExpr(Equals,
        LValueExpr(
        SimpleVar(buffer)),
        SExpr("
"))),
      AssignExpr(
       SimpleVar(buffer),
       FuncCallExpr(getchar,[])))))],
    FuncCallExpr(skipto,[]),
    AssignExpr(
     FieldVar(
      SimpleVar(any),
      any),
     FuncCallExpr(isdigit,[
      LValueExpr(
      SimpleVar(buffer))])),
    WhileExpr(
     FuncCallExpr(isdigit,[
      LValueExpr(
      SimpleVar(buffer))]),
     SeqExpr[
      AssignExpr(
       SimpleVar(i),
       BinOpExpr(Minus,
        BinOpExpr(Plus,
         BinOpExpr(Minus,
          LValueExpr(
          SimpleVar(i)),
          IExpr(10)),
         FuncCallExpr(ord,[
          LValueExpr(
          SimpleVar(buffer))])),
        FuncCallExpr(ord,[
         SExpr("0")]))),
      AssignExpr(
       SimpleVar(buffer),
       FuncCallExpr(getchar,[]))]),
    LValueExpr(
    SimpleVar(i))))),
  TypeDec[  SeqTy[
   (first,(int)),
   (rest,(list))]],
  FuncDecs(  fundec(readlist,TF[  ],
  SOME((list)),
   LetExpr([
    VarDec(any,NONE,
     RecordExpr((any),[
      (any,
       IExpr(0))])),
    VarDec(i,NONE,
     FuncCallExpr(readint,[
      LValueExpr(
      SimpleVar(any))]))],
    IfExpr(
     LValueExpr(
     FieldVar(
      SimpleVar(any),
      any)),
     RecordExpr((list),[
      (first,
       LValueExpr(
       SimpleVar(i))),
      (rest,
       FuncCallExpr(readlist,[]))]),
     NilExpr)))),
  FuncDecs(  fundec(merge,TF[
   a,(list),
   b,(list)  ],
  SOME((list)),
   IfExpr(
    BinOpExpr(Equals,
     LValueExpr(
     SimpleVar(a)),
     NilExpr),
    LValueExpr(
    SimpleVar(b)),
    IfExpr(
     BinOpExpr(Equals,
      LValueExpr(
      SimpleVar(b)),
      NilExpr),
     LValueExpr(
     SimpleVar(a)),
     IfExpr(
      BinOpExpr(LessThan,
       LValueExpr(
       FieldVar(
        SimpleVar(a),
        first)),
       LValueExpr(
       FieldVar(
        SimpleVar(b),
        first))),
      RecordExpr((list),[
       (first,
        LValueExpr(
        FieldVar(
         SimpleVar(a),
         first))),
       (rest,
        FuncCallExpr(merge,[
         LValueExpr(
         FieldVar(
          SimpleVar(a),
          rest)),
         LValueExpr(
         SimpleVar(b))]))]),
      RecordExpr((list),[
       (first,
        LValueExpr(
        FieldVar(
         SimpleVar(b),
         first))),
       (rest,
        FuncCallExpr(merge,[
         LValueExpr(
         SimpleVar(a)),
         LValueExpr(
         FieldVar(
          SimpleVar(b),
          rest))]))])))))),
  FuncDecs(  fundec(printint,TF[
   i,(int)  ],
  NONE
   LetExpr([
    FuncDecs(    fundec(f,TF[
     i,(int)    ],
    NONE
     IfExpr(
      BinOpExpr(GreatEqualThan,
       LValueExpr(
       SimpleVar(i)),
       IExpr(0)),
      SeqExpr[
       FuncCallExpr(f,[
        BinOpExpr(Div,
         LValueExpr(
         SimpleVar(i)),
         IExpr(10))]),
       FuncCallExpr(print,[
        FuncCallExpr(chr,[
         BinOpExpr(Plus,
          BinOpExpr(Minus,
           LValueExpr(
           SimpleVar(i)),
           BinOpExpr(Minus,
            BinOpExpr(Div,
             LValueExpr(
             SimpleVar(i)),
             IExpr(10)),
            IExpr(10))),
          FuncCallExpr(ord,[
           SExpr("0")]))])])])))],
    IfExpr(
     BinOpExpr(LessThan,
      LValueExpr(
      SimpleVar(i)),
      IExpr(0)),
     SeqExpr[
      FuncCallExpr(print,[
       SExpr("-")]),
      FuncCallExpr(f,[
       NegationExpr(        LValueExpr(
        SimpleVar(i)))])],
     IfExpr(
      BinOpExpr(GreatEqualThan,
       LValueExpr(
       SimpleVar(i)),
       IExpr(0)),
      FuncCallExpr(f,[
       LValueExpr(
       SimpleVar(i))]),
      FuncCallExpr(print,[
       SExpr("0")])))))),
  FuncDecs(  fundec(printlist,TF[
   l,(list)  ],
  NONE
   IfExpr(
    BinOpExpr(Equals,
     LValueExpr(
     SimpleVar(l)),
     NilExpr),
    FuncCallExpr(print,[
     SExpr("
")]),
    SeqExpr[
     FuncCallExpr(printint,[
      LValueExpr(
      FieldVar(
       SimpleVar(l),
       first))]),
     FuncCallExpr(print,[
      SExpr(" ")]),
     FuncCallExpr(printlist,[
      LValueExpr(
      FieldVar(
       SimpleVar(l),
       rest))])]))),
  VarDec(list1,NONE,
   FuncCallExpr(readlist,[])),
  VarDec(list2,NONE,
   SeqExpr[
    AssignExpr(
     SimpleVar(buffer),
     FuncCallExpr(getchar,[])),
    FuncCallExpr(readlist,[])])],
  FuncCallExpr(printlist,[
   FuncCallExpr(merge,[
    LValueExpr(
    SimpleVar(list1)),
    LValueExpr(
    SimpleVar(list2))])]))]
