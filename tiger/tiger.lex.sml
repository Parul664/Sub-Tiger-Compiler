(*#line 59.10 "tiger.lex"*)functor ExprLexFun(structure Tokens : Expr_TOKENS)(*#line 1.1 "tiger.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "tiger.lex"*)(*For this, I took reference from Reverse-Polish Compiler from Sir's Compiler GitLab Repository*)
type lineNo = int
type pos = int

(* Keeps the track of the line number *)
val lineRef : pos ref = ref 0

(* 
Since Tiger Language supports nestied comments, the check for proper nesting is done in
Lexing phase itself. And so, the the count is keep about what depth of Lexing are we in 
*)
val nestComment : int ref = ref 0

(* 
This is used to keep track of the string, when we are in the state of string.
We needed to break it into states in order to handle the precence of special characters in the string
*)
val strIn : string ref = ref "";

(* Concatinates the present string with string a *)
fun insertStr a (s:string ref) = (s := !s ^ a );

(* Updates the line number we are in *)
fun UpdateLine n = lineRef := !(lineRef) + n

(* Stuff done to make use of Tokens module generated by expr.grm *)
type svalue        = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult     = (svalue,pos) token

(* Printing the error *)
fun lineRange l r = "line " ^ Int.toString(l)
fun error (e,l,r) = TextIO.output(TextIO.stdErr, lineRange l r ^ ":" ^ e ^ "\n")

(* When we reach eof, we put the lineRef to 0, since if we directly run it next time, the lineNumber
would start from where it stopped *)
fun eof   ()      = (lineRef := 0 ;Tokens.EOF (!lineRef,!lineRef))


(* Some helper functions during lexing *)

fun charsToInt m (x :: xs) = charsToInt (10 * m + ord x - ord #"0") xs
  | charsToInt m []        = m

fun toSigned (#"-" :: xs) = ~ (charsToInt 0 xs)
  | toSigned (#"~" :: xs) = ~ (charsToInt 0 xs)
  | toSigned (#"+" :: xs) =   charsToInt 0 xs
  | toSigned xs           =   charsToInt 0 xs

val toInt        = toSigned o String.explode

(* Updates line number based on the \n's encountered *)
val newlineCount = List.length o List.filter (fn x => x = #"\n") o String.explode



(*#line 62.1 "tiger.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\000\000\000\000\000\000\000\000\000\089\089\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\089\000\088\000\000\000\087\000\086\085\084\083\082\081\080\078\
\\077\077\077\077\077\077\077\077\077\077\075\074\071\070\068\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\067\000\066\000\000\
\\000\061\056\010\054\048\038\010\010\035\010\010\032\010\029\027\
\\010\010\010\010\019\010\016\011\010\010\010\009\008\007\000\000\
\\000"
),
 (3, 
"\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\000\090\090\090\090\090\090\090\093\090\090\090\090\091\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090"
),
 (5, 
"\000\000\000\000\000\000\000\000\000\103\102\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\101\000\100\000\000\000\000\000\000\000\000\095\000\000\000\000\
\\095\095\095\095\095\095\095\095\095\095\000\000\000\000\000\000\
\\000\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\000\096\000\000\000\
\\000\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\012\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\013\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\014\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\015\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\017\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\018\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\024\010\010\010\010\010\010\023\
\\010\010\010\010\010\010\010\010\010\020\010\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\021\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\022\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\025\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\026\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\028\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\030\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\031\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\033\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\034\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\037\010\010\010\010\010\010\010\036\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\046\
\\010\010\010\010\010\039\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\040\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\041\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\042\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\043\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\044\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\045\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\047\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\051\010\049\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\050\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\052\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\053\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\055\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\057\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\058\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\059\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\060\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\062\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\063\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\064\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\065\010\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\073\072\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\077\077\077\077\077\077\077\077\077\077\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\079\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (89, 
"\000\000\000\000\000\000\000\000\000\089\089\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\089\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (90, 
"\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\000\090\090\090\090\090\090\090\000\090\090\090\090\000\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\090\
\\090"
),
 (91, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\092\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (93, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\094\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (95, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\095\000\000\000\000\
\\095\095\095\095\095\095\095\095\095\095\000\000\000\000\000\000\
\\000\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\000\000\000\000\000\
\\000\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\000\000\000\000\000\
\\000"
),
 (96, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\099\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\098\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [(N 12)], trans = 1},
{fin = [(N 12)], trans = 1},
{fin = [(N 10)], trans = 3},
{fin = [(N 10)], trans = 3},
{fin = [(N 163)], trans = 5},
{fin = [(N 163)], trans = 5},
{fin = [(N 159)], trans = 0},
{fin = [(N 117)], trans = 0},
{fin = [(N 157)], trans = 0},
{fin = [(N 155)], trans = 10},
{fin = [(N 155)], trans = 11},
{fin = [(N 155)], trans = 12},
{fin = [(N 155)], trans = 13},
{fin = [(N 155)], trans = 14},
{fin = [(N 51),(N 155)], trans = 10},
{fin = [(N 155)], trans = 16},
{fin = [(N 155)], trans = 17},
{fin = [(N 123),(N 155)], trans = 10},
{fin = [(N 155)], trans = 19},
{fin = [(N 155)], trans = 20},
{fin = [(N 155)], trans = 21},
{fin = [(N 128),(N 155)], trans = 10},
{fin = [(N 143),(N 155)], trans = 10},
{fin = [(N 155)], trans = 24},
{fin = [(N 155)], trans = 25},
{fin = [(N 73),(N 155)], trans = 10},
{fin = [(N 155)], trans = 27},
{fin = [(N 134),(N 155)], trans = 10},
{fin = [(N 155)], trans = 29},
{fin = [(N 155)], trans = 30},
{fin = [(N 25),(N 155)], trans = 10},
{fin = [(N 155)], trans = 32},
{fin = [(N 155)], trans = 33},
{fin = [(N 62),(N 155)], trans = 10},
{fin = [(N 155)], trans = 35},
{fin = [(N 131),(N 155)], trans = 10},
{fin = [(N 54),(N 155)], trans = 10},
{fin = [(N 155)], trans = 38},
{fin = [(N 155)], trans = 39},
{fin = [(N 155)], trans = 40},
{fin = [(N 155)], trans = 41},
{fin = [(N 155)], trans = 42},
{fin = [(N 155)], trans = 43},
{fin = [(N 155)], trans = 44},
{fin = [(N 91),(N 155)], trans = 10},
{fin = [(N 155)], trans = 46},
{fin = [(N 29),(N 58),(N 155)], trans = 10},
{fin = [(N 155)], trans = 48},
{fin = [(N 155)], trans = 49},
{fin = [(N 82),(N 155)], trans = 10},
{fin = [(N 155)], trans = 51},
{fin = [(N 155)], trans = 52},
{fin = [(N 78),(N 155)], trans = 10},
{fin = [(N 155)], trans = 54},
{fin = [(N 146),(N 155)], trans = 10},
{fin = [(N 155)], trans = 56},
{fin = [(N 155)], trans = 57},
{fin = [(N 155)], trans = 58},
{fin = [(N 155)], trans = 59},
{fin = [(N 140),(N 152),(N 155)], trans = 10},
{fin = [(N 155)], trans = 61},
{fin = [(N 155)], trans = 62},
{fin = [(N 155)], trans = 63},
{fin = [(N 155)], trans = 64},
{fin = [(N 68),(N 155)], trans = 10},
{fin = [(N 43)], trans = 0},
{fin = [(N 41)], trans = 0},
{fin = [(N 103)], trans = 68},
{fin = [(N 109)], trans = 0},
{fin = [(N 99)], trans = 0},
{fin = [(N 101)], trans = 71},
{fin = [(N 112)], trans = 0},
{fin = [(N 106)], trans = 0},
{fin = [(N 45)], trans = 0},
{fin = [(N 93)], trans = 75},
{fin = [(N 115)], trans = 0},
{fin = [(N 15)], trans = 77},
{fin = [(N 35)], trans = 78},
{fin = [(N 2)], trans = 0},
{fin = [(N 97)], trans = 0},
{fin = [(N 19),(N 31)], trans = 0},
{fin = [(N 95)], trans = 0},
{fin = [(N 17)], trans = 0},
{fin = [(N 21),(N 33)], trans = 0},
{fin = [(N 39)], trans = 0},
{fin = [(N 37)], trans = 0},
{fin = [(N 119)], trans = 0},
{fin = [(N 161)], trans = 0},
{fin = [(N 12)], trans = 89},
{fin = [(N 10)], trans = 90},
{fin = [], trans = 91},
{fin = [(N 8)], trans = 0},
{fin = [], trans = 93},
{fin = [(N 5)], trans = 0},
{fin = [(N 163)], trans = 95},
{fin = [], trans = 96},
{fin = [(N 175)], trans = 0},
{fin = [(N 178)], trans = 0},
{fin = [(N 172)], trans = 0},
{fin = [(N 180)], trans = 0},
{fin = [(N 165)], trans = 0},
{fin = [(N 167)], trans = 0},
{fin = [(N 169)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val STRING = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  10 => let val yytext=yymktext() in (*#line 72.30 "tiger.lex"*) let val old = !lineRef
                              in UpdateLine (newlineCount yytext); continue()
                              end
                            (*#line 826.1 "tiger.lex.sml"*)
 end
| 101 => ((*#line 111.23 "tiger.lex"*)Tokens.LT (!lineRef,!lineRef)(*#line 828.1 "tiger.lex.sml"*)
)
| 103 => ((*#line 112.23 "tiger.lex"*)Tokens.GT (!lineRef,!lineRef)(*#line 830.1 "tiger.lex.sml"*)
)
| 106 => ((*#line 113.23 "tiger.lex"*)Tokens.LTE (!lineRef,!lineRef)(*#line 832.1 "tiger.lex.sml"*)
)
| 109 => ((*#line 114.23 "tiger.lex"*)Tokens.GTE (!lineRef,!lineRef)(*#line 834.1 "tiger.lex.sml"*)
)
| 112 => ((*#line 115.23 "tiger.lex"*)Tokens.NEQ (!lineRef,!lineRef)(*#line 836.1 "tiger.lex.sml"*)
)
| 115 => ((*#line 116.23 "tiger.lex"*)Tokens.ASSIGN (!lineRef,!lineRef)(*#line 838.1 "tiger.lex.sml"*)
)
| 117 => ((*#line 117.23 "tiger.lex"*)Tokens.OR (!lineRef,!lineRef)(*#line 840.1 "tiger.lex.sml"*)
)
| 119 => ((*#line 118.23 "tiger.lex"*)Tokens.AND (!lineRef,!lineRef)(*#line 842.1 "tiger.lex.sml"*)
)
| 12 => let val yytext=yymktext() in (*#line 79.25 "tiger.lex"*) let val old = !lineRef
                         in UpdateLine (newlineCount yytext); continue()
                         end
                       (*#line 847.1 "tiger.lex.sml"*)
 end
| 123 => ((*#line 119.23 "tiger.lex"*)Tokens.VAR (!lineRef,!lineRef)(*#line 849.1 "tiger.lex.sml"*)
)
| 128 => ((*#line 120.23 "tiger.lex"*)Tokens.TYPE (!lineRef,!lineRef)(*#line 851.1 "tiger.lex.sml"*)
)
| 131 => ((*#line 121.23 "tiger.lex"*)Tokens.IN (!lineRef,!lineRef)(*#line 853.1 "tiger.lex.sml"*)
)
| 134 => ((*#line 122.23 "tiger.lex"*)Tokens.OF (!lineRef,!lineRef)(*#line 855.1 "tiger.lex.sml"*)
)
| 140 => ((*#line 123.23 "tiger.lex"*)Tokens.BREAK (!lineRef,!lineRef)(*#line 857.1 "tiger.lex.sml"*)
)
| 143 => ((*#line 124.23 "tiger.lex"*)Tokens.TO (!lineRef,!lineRef)(*#line 859.1 "tiger.lex.sml"*)
)
| 146 => ((*#line 125.23 "tiger.lex"*)Tokens.DO (!lineRef,!lineRef)(*#line 861.1 "tiger.lex.sml"*)
)
| 15 => let val yytext=yymktext() in (*#line 84.23 "tiger.lex"*) Tokens.CONST_INT (toInt yytext, !lineRef, !lineRef) (*#line 863.1 "tiger.lex.sml"*)
 end
| 152 => ((*#line 126.23 "tiger.lex"*)Tokens.BREAK (!lineRef,!lineRef)(*#line 865.1 "tiger.lex.sml"*)
)
| 155 => let val yytext=yymktext() in (*#line 127.23 "tiger.lex"*)Tokens.ID(yytext, !lineRef,!lineRef)(*#line 867.1 "tiger.lex.sml"*)
 end
| 157 => ((*#line 128.23 "tiger.lex"*)Tokens.LBRAC_C(!lineRef,!lineRef)(*#line 869.1 "tiger.lex.sml"*)
)
| 159 => ((*#line 129.23 "tiger.lex"*)Tokens.RBRAC_C(!lineRef,!lineRef)(*#line 871.1 "tiger.lex.sml"*)
)
| 161 => ((*#line 130.23 "tiger.lex"*)strIn := "";YYBEGIN STRING; continue()(*#line 873.1 "tiger.lex.sml"*)
)
| 163 => let val yytext=yymktext() in (*#line 131.27 "tiger.lex"*)insertStr yytext strIn ;continue()(*#line 875.1 "tiger.lex.sml"*)
 end
| 165 => let val yytext=yymktext() in (*#line 132.23 "tiger.lex"*)(insertStr yytext strIn ;continue())(*#line 877.1 "tiger.lex.sml"*)
 end
| 167 => ((*#line 133.23 "tiger.lex"*)insertStr "\n" strIn;continue()(*#line 879.1 "tiger.lex.sml"*)
)
| 169 => ((*#line 134.23 "tiger.lex"*)insertStr "\t" strIn;continue()(*#line 881.1 "tiger.lex.sml"*)
)
| 17 => ((*#line 85.23 "tiger.lex"*) Tokens.PLUS  (!lineRef,!lineRef) (*#line 883.1 "tiger.lex.sml"*)
)
| 172 => ((*#line 135.23 "tiger.lex"*)insertStr "\"" strIn;continue()(*#line 885.1 "tiger.lex.sml"*)
)
| 175 => ((*#line 136.23 "tiger.lex"*)insertStr "\n" strIn;continue()(*#line 887.1 "tiger.lex.sml"*)
)
| 178 => ((*#line 137.23 "tiger.lex"*)insertStr "\\" strIn;continue()(*#line 889.1 "tiger.lex.sml"*)
)
| 180 => ((*#line 138.23 "tiger.lex"*)YYBEGIN INITIAL; Tokens.CONST_STR(!strIn,!lineRef,!lineRef)(*#line 891.1 "tiger.lex.sml"*)
)
| 19 => ((*#line 86.23 "tiger.lex"*) Tokens.MINUS  (!lineRef,!lineRef) (*#line 893.1 "tiger.lex.sml"*)
)
| 2 => ((*#line 69.19 "tiger.lex"*)YYBEGIN COMMENT; nestComment := 1 ;continue()(*#line 895.1 "tiger.lex.sml"*)
)
| 21 => ((*#line 87.23 "tiger.lex"*) Tokens.MUL (!lineRef,!lineRef) (*#line 897.1 "tiger.lex.sml"*)
)
| 25 => ((*#line 88.23 "tiger.lex"*) Tokens.NIL (!lineRef,!lineRef)(*#line 899.1 "tiger.lex.sml"*)
)
| 29 => ((*#line 89.23 "tiger.lex"*) Tokens.FOR (!lineRef,!lineRef)(*#line 901.1 "tiger.lex.sml"*)
)
| 31 => ((*#line 90.23 "tiger.lex"*)Tokens.MINUS (!lineRef,!lineRef)(*#line 903.1 "tiger.lex.sml"*)
)
| 33 => ((*#line 91.23 "tiger.lex"*)Tokens.MUL (!lineRef,!lineRef)(*#line 905.1 "tiger.lex.sml"*)
)
| 35 => ((*#line 92.23 "tiger.lex"*)Tokens.DIVIDE (!lineRef,!lineRef)(*#line 907.1 "tiger.lex.sml"*)
)
| 37 => ((*#line 93.23 "tiger.lex"*)Tokens.LBRAC_R (!lineRef,!lineRef)(*#line 909.1 "tiger.lex.sml"*)
)
| 39 => ((*#line 94.23 "tiger.lex"*)Tokens.RBRAC_R (!lineRef,!lineRef)(*#line 911.1 "tiger.lex.sml"*)
)
| 41 => ((*#line 95.23 "tiger.lex"*)Tokens.LBRAC_SQ (!lineRef,!lineRef)(*#line 913.1 "tiger.lex.sml"*)
)
| 43 => ((*#line 96.23 "tiger.lex"*)Tokens.RBRAC_SQ (!lineRef,!lineRef)(*#line 915.1 "tiger.lex.sml"*)
)
| 45 => ((*#line 97.23 "tiger.lex"*)Tokens.SEMICOLON (!lineRef,!lineRef)(*#line 917.1 "tiger.lex.sml"*)
)
| 5 => ((*#line 70.19 "tiger.lex"*)nestComment := !nestComment -1; if (!nestComment =0) then YYBEGIN INITIAL else if (!nestComment <0) then error("Comments not closed properly",!lineRef,!lineRef) else  ();continue()(*#line 919.1 "tiger.lex.sml"*)
)
| 51 => ((*#line 98.23 "tiger.lex"*)Tokens.WHILE (!lineRef,!lineRef)(*#line 921.1 "tiger.lex.sml"*)
)
| 54 => ((*#line 99.23 "tiger.lex"*)Tokens.IF (!lineRef,!lineRef)(*#line 923.1 "tiger.lex.sml"*)
)
| 58 => ((*#line 100.23 "tiger.lex"*)Tokens.FOR (!lineRef,!lineRef)(*#line 925.1 "tiger.lex.sml"*)
)
| 62 => ((*#line 101.23 "tiger.lex"*)Tokens.LET (!lineRef,!lineRef)(*#line 927.1 "tiger.lex.sml"*)
)
| 68 => ((*#line 102.23 "tiger.lex"*)Tokens.ARRAY (!lineRef,!lineRef)(*#line 929.1 "tiger.lex.sml"*)
)
| 73 => ((*#line 103.23 "tiger.lex"*)Tokens.THEN (!lineRef,!lineRef)(*#line 931.1 "tiger.lex.sml"*)
)
| 78 => ((*#line 104.23 "tiger.lex"*)Tokens.ELSE (!lineRef,!lineRef)(*#line 933.1 "tiger.lex.sml"*)
)
| 8 => ((*#line 71.19 "tiger.lex"*)nestComment := !nestComment +1; continue()(*#line 935.1 "tiger.lex.sml"*)
)
| 82 => ((*#line 105.23 "tiger.lex"*)Tokens.END (!lineRef,!lineRef)(*#line 937.1 "tiger.lex.sml"*)
)
| 91 => ((*#line 106.26 "tiger.lex"*)Tokens.FUNCTION (!lineRef,!lineRef)(*#line 939.1 "tiger.lex.sml"*)
)
| 93 => ((*#line 107.23 "tiger.lex"*)Tokens.COLON (!lineRef,!lineRef)(*#line 941.1 "tiger.lex.sml"*)
)
| 95 => ((*#line 108.23 "tiger.lex"*)Tokens.COMMA (!lineRef,!lineRef)(*#line 943.1 "tiger.lex.sml"*)
)
| 97 => ((*#line 109.23 "tiger.lex"*)Tokens.DOT (!lineRef,!lineRef)(*#line 945.1 "tiger.lex.sml"*)
)
| 99 => ((*#line 110.23 "tiger.lex"*)Tokens.EQ (!lineRef,!lineRef)(*#line 947.1 "tiger.lex.sml"*)
)
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
